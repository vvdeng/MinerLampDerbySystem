C51 COMPILER V9.01   LCD12864                                                              01/18/2014 17:34:42 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN lcd12864.OBJ
COMPILER INVOKED BY: d:\Keil4\C51\BIN\C51.EXE lcd12864.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          注意！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！11
   3          蒋总的屏CS1、CS2是高电平有效，且延时时间经实践需选为200us
   4          市场上的屏CS1、CS2是低电平有效，且延时时间经实践需选为100us
   5          */
   6          #include "lcd12864.h"
   7          
   8          #define ENABLE 1
   9          #define DISENABLE 0
  10          extern bit infoChanged;
  11          unsigned char xdata null16x16[]={ 
  12          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  13          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  14          };
  15          unsigned char xdata underline16x16[]={ 
  16          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  17          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  18          
  19          };      
  20          unsigned char xdata full16x16[]={ 
  21          0x00,0x00,0x00,0x00,0xfc,0xfc,0xff,0xff,0xff,0xff,0xfc,0xfc,0x00,0x00,0x00,0x00,
  22          0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  23          
  24          };
  25          unsigned char xdata half16x16[]={ 
  26          0x00,0x00,0x00,0x00,0xfc,0x04,0x07,0x07,0x07,0x07,0x04,0xfc,0x00,0x00,0x00,0x00,
  27          0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  28          };
  29          
  30          /*unsigned char xdata half16x16[]={
  31          0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  
  32          0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, };*/
  33          unsigned char xdata empty16x16[]={ 
  34          0x00,0x00,0x00,0x00,0xfc,0x04,0x07,0x07,0x07,0x07,0x04,0xfc,0x00,0x00,0x00,0x00,
  35          0x00,0x00,0x00,0x00,0xff,0x80,0x80,0x80,0x80,0x80,0x80,0xff,0x00,0x00,0x00,0x00,
  36          };
  37          
  38          unsigned char xdata error16x16[]={ 
  39          0x00,0x00,0x00,0x00,0xfc,0x24,0x47,0x87,0x87,0x47,0x24,0xfc,0x00,0x00,0x00,0x00,
  40          0x00,0x00,0x00,0x00,0xff,0x84,0x82,0x81,0x81,0x82,0x84,0xff,0x00,0x00,0x00,0x00,
  41          };
  42          unsigned char xdata arrow16x16[]={ 
  43          0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x90,0xA0,0xC0,0x80,
  44          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x01,0x00,
  45          };
  46          void delayus(uint n)
  47          {
  48   1              uint i;
  49   1              for(i=0;i<n;i++);
  50   1      }
  51          void    LCD_WrCmd(uchar port,uchar  cmd)        
  52          {  
  53   1      delayus(DISPLAY_DELAY_TIME);
  54   1              EN=0;
  55   1              if(port==1){
C51 COMPILER V9.01   LCD12864                                                              01/18/2014 17:34:42 PAGE 2   

  56   2                      CS1=ENABLE;
  57   2                      delayus(DISPLAY_DELAY_TIME);
  58   2                      CS2=DISENABLE;
  59   2                      delayus(DISPLAY_DELAY_TIME);
  60   2              }
  61   1              else
  62   1              {
  63   2                      CS1=DISENABLE;
  64   2                      delayus(DISPLAY_DELAY_TIME);
  65   2                      CS2=ENABLE;
  66   2                      delayus(DISPLAY_DELAY_TIME);
  67   2         }
  68   1         DI=0;        
  69   1         RW=0;
  70   1         EN=1;
  71   1         LCD=cmd; 
  72   1         EN=0;
  73   1      }
  74          
  75          void  LCD_WrDat(uchar port ,uchar wrdata)       
  76          {  
  77   1      delayus(DISPLAY_DELAY_TIME);
  78   1              EN=0;
  79   1              if(port==1){
  80   2                      CS1=ENABLE;
  81   2                      delayus(DISPLAY_DELAY_TIME);
  82   2                      CS2=DISENABLE;
  83   2                      delayus(DISPLAY_DELAY_TIME);
  84   2              }else{
  85   2                      CS1=DISENABLE;
  86   2                      delayus(DISPLAY_DELAY_TIME);
  87   2                      CS2=ENABLE;
  88   2                      delayus(DISPLAY_DELAY_TIME);
  89   2         }
  90   1         DI=1;        
  91   1         RW=0;
  92   1         EN=1;
  93   1         LCD=wrdata; 
  94   1         EN=0;
  95   1      }
  96          
  97          void  LCD_DispFill(uchar filldata) 
  98          {  uchar  x, y;
  99   1         LCD_WrCmd(1,LCD_STARTROW);
 100   1         LCD_WrCmd(2,LCD_STARTROW);   
 101   1         for(y=0; y<8; y++)  
 102   1         {  LCD_WrCmd(1,LCD_ADDRSTRY+y);
 103   2            LCD_WrCmd(1,LCD_ADDRSTRX);
 104   2            LCD_WrCmd(2,LCD_ADDRSTRY+y);
 105   2            LCD_WrCmd(2,LCD_ADDRSTRX);
 106   2         
 107   2            for(x=0; x<64; x++)
 108   2            {  LCD_WrDat(1,filldata);
 109   3               LCD_WrDat(2,filldata);
 110   3      
 111   3            } 
 112   2         }
 113   1      }
 114          
 115          void  LCD_DispIni(void)                 
 116          {
 117   1      
C51 COMPILER V9.01   LCD12864                                                              01/18/2014 17:34:42 PAGE 3   

 118   1         LCD_RST = 0; 
 119   1         delayus(1000);
 120   1         LCD_RST = 1;  
 121   1         delayus(1000);
 122   1         LCD_WrCmd(1,LCD_DISPON);      
 123   1         LCD_WrCmd(1,LCD_STARTROW);
 124   1         delayus(1000);       
 125   1         LCD_WrCmd(2,LCD_DISPON);     
 126   1         LCD_WrCmd(2,LCD_STARTROW);           
 127   1         LCD_DispFill(0x00);
 128   1         LCD_WrCmd(1,LCD_ADDRSTRY+0);
 129   1         LCD_WrCmd(1,LCD_ADDRSTRX+0);
 130   1         LCD_WrCmd(2,LCD_ADDRSTRY+0);
 131   1         LCD_WrCmd(2,LCD_ADDRSTRX+0);
 132   1      }
 133          
 134          
 135          
 136          uchar *lbatStateGraph=0;
 137          void FullCGRAM()
 138          { 
 139   1           lbatStateGraph=full16x16;
 140   1      }   
 141          void HalfCGRAM()
 142          { 
 143   1           lbatStateGraph=half16x16;
 144   1      }
 145          void EmptyCGRAM()
 146          { 
 147   1           lbatStateGraph=empty16x16;
 148   1      } 
 149          void ErrorCGRAM()
 150          { 
 151   1           lbatStateGraph=error16x16;
 152   1      }
 153          void NullCGRAM()
 154          { 
 155   1           lbatStateGraph=null16x16;
 156   1      }
 157          void DisplayCGRAM(unsigned char cx,unsigned char cy)
 158          {
 159   1              
 160   1              uchar *p,i,s,page;
 161   1              uchar port;
 162   1              cy--;
 163   1              
 164   1              p=lbatStateGraph;
 165   1              if(cx<4)
 166   1              {
 167   2                      port=1;
 168   2                      s=cx<<4;
 169   2              }
 170   1              else
 171   1              {
 172   2                      port=2;
 173   2                      s=((cx-4)<<4);
 174   2                              
 175   2              }
 176   1              
 177   1              for(page=0;page<2;page++)
 178   1              {
 179   2                      LCD_WrCmd(port,0xb8+cy*2+page);
C51 COMPILER V9.01   LCD12864                                                              01/18/2014 17:34:42 PAGE 4   

 180   2                      delayus(100);
 181   2                      LCD_WrCmd(port,0x40+s);
 182   2                      delayus(100);
 183   2                      for(i=0;i<16;i++)
 184   2                      {
 185   3                              LCD_WrDat(port,*p);
 186   3                              delayus(10);
 187   3                              p++;
 188   3                      }
 189   2              }
 190   1      } 
 191          
 192          
 193          
 194          void ClrScreen()
 195          { 
 196   1         LCD_DispFill(0x00);
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    443    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    224    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
