C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CONFIG
OBJECT MODULE PLACED IN config.OBJ
COMPILER INVOKED BY: d:\Keil4\C51\BIN\C51.EXE config.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "config.h"
   2          #include "lcd12864.h"
   3          uchar code shumaMap[16]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
   4          uchar code shumaDotMap[16]={0xbf,0x86,0xdb,0xcf,0xe6,0xed,0xfd,0x87,0xff,0xef,0xf7,0xfc,0xb9,0xde,0xf9,0xf
             -1};
   5          uchar duanInteval[4]={3,12,48,192};
   6          uchar digiBuf[BITS_COUNT]={0};
   7          uchar digiDispBuf[BITS_COUNT+1]={0};
   8          uchar dotPos=DOT_POS_NONE;
   9          uchar  irTime=0;//红外用全局变量
  10          bit inSetting=0,irProcessFlag=0,irReceiveFlag=0;
  11          uchar IRcord[4];
  12          uchar irData[33];
  13          uchar irCount=0;
  14          uchar setState=SET_STATE_NONE;
  15          
  16          uchar configMenuArr[CONFIG_LEN]={CONFIG_ADDR,CONFIG_BRIGHT,CONFIG_BATFULL,CONFIG_DEBUG};
  17          uchar configValueArr[CONFIG_LEN]={0};
  18          uchar  *  configMenuStrArr[CONFIG_LEN]={"地址设置","亮度阈值","充满阈值","调试"};
  19          
  20          
  21          void showMenuItem(uchar index,bit selected){
  22   1              ClrScreen();
  23   1              if(configValueArr[CONFIG_DEBUG]!=0){
  24   2                      LCD_PutString(0,0,"调试");
  25   2              }
  26   1              LCD_PutString(3,0,"设置");
  27   1              LCD_PutString(2,1,configMenuStrArr[index]);
  28   1              if(selected){
  29   2                      LCD_PutChar(1,2,26);//输出"->"
  30   2              }
  31   1      } 
  32          void dispDigit(){
  33   1              
  34   1                      
  35   1                      digiDispBuf[0]='0'+digiBuf[0];
  36   1                      digiDispBuf[1]='0'+digiBuf[1];
  37   1                      digiDispBuf[2]='0'+digiBuf[2];
  38   1                      digiDispBuf[3]='\0';
  39   1                      LCD_PutString(3,2,digiDispBuf);
  40   1              
  41   1      }
  42          
  43          uchar  curMenuIndex=0,curSelBit=0;
  44          void Ir_work(void)
  45          {
  46   1              switch (IRcord[2]){
  47   2              case IR_CHANNEL:
  48   2              if(setState==SET_STATE_NONE){
  49   3                      setState=SET_STATE_MENU;
  50   3                      curMenuIndex=0;
  51   3                      showMenuItem(curMenuIndex,1);
  52   3                      
  53   3              }
  54   2              break;
C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 2   

  55   2              case IR_EQ:
  56   2              if(setState==SET_STATE_MENU){
  57   3                      setState=SET_STATE_MENU_ITEM_SEL;
  58   3              
  59   3                      curSelBit=0;
  60   3                      
  61   3                      
  62   3                      showMenuItem(curMenuIndex,1);
  63   3                      digiBuf[0]=configValueArr[curMenuIndex]/100;
  64   3                      digiBuf[1]=(configValueArr[curMenuIndex]%100)/10;
  65   3                      digiBuf[2]=configValueArr[curMenuIndex]%10;
  66   3                      dispDigit();
  67   3              }
  68   2              else if(setState==SET_STATE_MENU_ITEM_SEL){
  69   3                      setState=SET_STATE_MENU_ITEM_BIT_SEL;
  70   3                      showMenuItem(curMenuIndex,0);
  71   3                      LCD_PutChar(2,3,26);//输出"->"
  72   3                      dispDigit();
  73   3                      curSelBit=0;
  74   3                      LCD_PutPosition(3+curSelBit,3);
  75   3              }
  76   2              else if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
  77   3                      if(curMenuIndex==CONFIG_EXIT){
  78   4                              setState=SET_STATE_NONE;
  79   4                              
  80   4                              inSetting=0;                    
  81   4                      }
  82   3                      else{
  83   4                              configValueArr[curMenuIndex]=digiBuf[0]*100+digiBuf[1]*10+digiBuf[2];
  84   4                              saveConfig();
  85   4                              LCD_PutString(2,3,"设置完毕!");
  86   4                              setState=SET_STATE_MENU_ITEM_FINISHED;
  87   4                      
  88   4                      
  89   4                      }
  90   3              }               
  91   2      
  92   2                      
  93   2              break;
  94   2              case IR_CHANNEL_MINUS:
  95   2              if(setState==SET_STATE_MENU){
  96   3                      setState=SET_STATE_NONE;
  97   3                      ClrScreen();
  98   3              }
  99   2              else if(setState==SET_STATE_MENU_ITEM_SEL){
 100   3                      setState=SET_STATE_MENU;
 101   3                      showMenuItem(curMenuIndex,1);
 102   3              
 103   3              }
 104   2              else if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 105   3                      setState=SET_STATE_MENU;
 106   3                      showMenuItem(curMenuIndex,1);
 107   3              }
 108   2              else if(setState==SET_STATE_MENU_ITEM_FINISHED){
 109   3                      setState=SET_STATE_MENU_ITEM_BIT_SEL;
 110   3                      showMenuItem(curMenuIndex,0);
 111   3                      LCD_PutChar(2,3,26);//输出"->"
 112   3                      dispDigit();
 113   3                      curSelBit=0;
 114   3      
 115   3                      LCD_PutPosition(3+curSelBit,3);
 116   3              }
C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 3   

 117   2              break;
 118   2              case IR_NEXT:
 119   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 120   3                      curSelBit=(curSelBit+1)%BITS_COUNT; 
 121   3                      LCD_PutPosition(3+curSelBit,3);
 122   3      
 123   3              
 124   3                      
 125   3              }
 126   2              break;
 127   2              case IR_PREV:
 128   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 129   3                      curSelBit=(curSelBit+BITS_COUNT-1)%BITS_COUNT;
 130   3                      LCD_PutPosition(3+curSelBit,3);
 131   3                      
 132   3                      
 133   3                      
 134   3              }
 135   2              break;
 136   2              case IR_VOL_ADD:
 137   2              if(setState==SET_STATE_MENU){
 138   3                      
 139   3                      curMenuIndex=(curMenuIndex+1)%MENU_LEN;
 140   3              //      curMenu=curMenuArr[curMenuIndex];
 141   3                      showMenuItem(curMenuIndex,0);
 142   3                      
 143   3              } else  if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 144   3                      
 145   3                              digiBuf[curSelBit]=(digiBuf[curSelBit]+1)%10;
 146   3                              dispDigit();
 147   3              }
 148   2              break;
 149   2              case IR_VOL_MINUS:
 150   2              if(setState==SET_STATE_MENU){
 151   3                      
 152   3                      curMenuIndex=(curMenuIndex+MENU_LEN-1)%MENU_LEN;
 153   3              //      curMenu=curMenuArr[curMenuIndex];
 154   3                      showMenuItem(curMenuIndex,0);
 155   3                      
 156   3              }else   if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 157   3                      
 158   3                              digiBuf[curSelBit]=(digiBuf[curSelBit]+10-1)%10;
 159   3                              dispDigit();
 160   3              }
 161   2              break;
 162   2              case IR_ZERO:
 163   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 164   3                              digiBuf[curSelBit]=0;
 165   3                              dispDigit();
 166   3              }
 167   2              break;
 168   2              case IR_ONE:
 169   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 170   3                              digiBuf[curSelBit]=1;
 171   3                              dispDigit();
 172   3              }
 173   2              break;
 174   2              case IR_TWO:
 175   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 176   3                              digiBuf[curSelBit]=2;
 177   3                              dispDigit();
 178   3              }
C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 4   

 179   2              break;
 180   2              case IR_THREE:
 181   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 182   3                              digiBuf[curSelBit]=3;
 183   3                              dispDigit();
 184   3              }
 185   2              break;
 186   2              case IR_FOUR:
 187   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 188   3                              digiBuf[curSelBit]=4;
 189   3                              dispDigit();
 190   3              }
 191   2              break;
 192   2              case IR_FIVE:
 193   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 194   3                              digiBuf[curSelBit]=5;
 195   3                              dispDigit();
 196   3              }
 197   2              break;
 198   2              case IR_SIX:
 199   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 200   3                              digiBuf[curSelBit]=6;
 201   3                              dispDigit();
 202   3              }
 203   2              break;
 204   2              case IR_SEVEN:
 205   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 206   3                              digiBuf[curSelBit]=7;
 207   3                              dispDigit();
 208   3              }
 209   2              break;
 210   2              case IR_EIGHT:
 211   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 212   3                              digiBuf[curSelBit]=8;
 213   3                              dispDigit();
 214   3              }
 215   2              break;
 216   2              case IR_NINE:
 217   2              if(setState==SET_STATE_MENU_ITEM_BIT_SEL){
 218   3                              digiBuf[curSelBit]=9;
 219   3                              dispDigit();
 220   3              }
 221   2              break;
 222   2      
 223   2              default:
 224   2                      break;
 225   2              
 226   2              }
 227   1              
 228   1      }
 229          
 230          void Ircordpro(void)
 231          { 
 232   1              uchar i, j, k=1;
 233   1              uchar cord,value;
 234   1      
 235   1              for(i=0;i<4;i++)      //处理4个字节
 236   1              {
 237   2                      for(j=1;j<=8;j++) //处理1个字节8位
 238   2                      {
 239   3                              cord=irData[k];
 240   3              //              if(cord>7)//大于某值为1，这里为7，与晶振有关，这个值需要具体调试          0.278*7=1.946 0.256*7=    1.792
C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 5   

 241   3                              if(cord>2)       // 0.6*3=1.8
 242   3                              {
 243   4                                      value|=0x80;
 244   4                              }
 245   3                              if(j<8)
 246   3                              {
 247   4                                      value>>=1;
 248   4                              }
 249   3                              k++;
 250   3                      }
 251   2                      IRcord[i]=value;
 252   2                      value=0;     
 253   2              } 
 254   1      }
 255          
 256          
 257          void saveConfig(){
 258   1              uchar m;
 259   1              IapEraseSector(IAP_ADDRESS); 
 260   1              for(m=0;m<CONFIG_LEN-1;m++){      //最后一项为退出选项，无需保存至rom
 261   2                      IapProgramByte(CONFIG_ROM_ADDR+m,configValueArr[m]);
 262   2                      configValueArr[m]= IapReadByte(CONFIG_ROM_ADDR+m);
 263   2              }
 264   1      }
 265          void retreiveConfig(){
 266   1              uchar m;
 267   1              for(m=0;m<CONFIG_LEN-1;m++){      //最后一项为退出选项，无需保存至rom
 268   2              //      if(m==CONFIG_XXX){}
 269   2                      configValueArr[m]= IapReadByte(CONFIG_ROM_ADDR+m);
 270   2                      if(configValueArr[m]==0xff){
 271   3                              configValueArr[m]=0;
 272   3                      }
 273   2              }
 274   1      }
 275          void processSettingIfNecessary(){
 276   1          if(irProcessFlag)                        
 277   1                {   
 278   2                 Ircordpro();
 279   2                 Ir_work();
 280   2                 irProcessFlag=0;
 281   2                }
 282   1      
 283   1                 
 284   1        
 285   1      }
 286          void irTime0Process(){
 287   1              TL0 = 0xD7;             //设置定时初值   16位 600us 误差1%
 288   1              TH0 = 0xFD;             //设置定时初值
 289   1      //      TL0=0x00;
 290   1      //      TH0=0xff;
 291   1              if(irReceiveFlag==1)
 292   1              {
 293   2                      irTime++;  //用于计数2个下降沿之间的时间
 294   2              }
 295   1      }
 296          void irExProcess(){
 297   1              if(irProcessFlag==0)                      
 298   1              {
 299   2                      if(irReceiveFlag==1)
 300   2                      {
 301   3                 //   if(irTime>=33&&irTime<63){//引导码 TC9012的头码，9ms+4.5ms                0.278*33=9.174  0.278*63=17.514  0.2
             -56*33= 8.448 0.256*63= 16.128
C51 COMPILER V9.01   CONFIG                                                                02/07/2014 16:50:22 PAGE 6   

 302   3                     if(irTime>=15&&irTime<28){ //  0.6*15=9 0.6*27=16.2
 303   4                                      irCount=0;
 304   4                              }
 305   3                      irData[irCount]=irTime;//存储每个电平的持续时间，用于以后判断是0还是1
 306   3                      irTime=0;
 307   3                      irCount++;
 308   3                              if(irCount==33)
 309   3                      {
 310   4                                      irReceiveFlag=0;
 311   4                                      irProcessFlag=1;
 312   4                                      irCount=0;
 313   4                      //              ET0=0;    //关中断
 314   4                      //      TR0 = 0;                //定时器0停止计时
 315   4                              }
 316   3                      
 317   3                      }
 318   2                      else{
 319   3                               irReceiveFlag=1;
 320   3                               irTime=0;
 321   3              //               ET0=1;    //开中断
 322   3              //           TR0 = 1;           //定时器0开始计时
 323   3                      }
 324   2          }
 325   1      }
 326          void irInit(){  //未打开总中断
 327   1        
 328   1              AUXR &= 0x7F;           //定时器时钟12T模式
 329   1              TMOD &= 0xF0;           //设置定时器模式
 330   1              TMOD |= 0x01;           //设置定时器模式
 331   1              TL0 = 0xD7;             //设置定时初值   16位 600us 误差1%
 332   1              TH0 = 0xFD;             //设置定时初值
 333   1              TF0 = 0;                //清除TF0标志
 334   1              ET0=1;
 335   1              TR0=1;
 336   1      
 337   1              IT0 = 1;   //指定外部中断0下降沿触发，INT0 (P3.2)
 338   1              EX0 = 1;   //使能外部中断
 339   1       
 340   1      
 341   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1310    ----
   CONSTANT SIZE    =     79    ----
   XDATA SIZE       =     74       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
