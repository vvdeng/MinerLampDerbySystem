C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN lcd12864.OBJ
COMPILER INVOKED BY: d:\Keil4\C51\BIN\C51.EXE lcd12864.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          注意！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！11
   3          蒋总的屏CS1、CS2是高电平有效，且延时时间经实践需选为200us
   4          市场上的屏CS1、CS2是低电平有效，且延时时间经实践需选为100us
   5          */
   6          #include "lcd12864.h"
   7          #include "hanzi.h"
   8          #include "vvspi.h"
   9          #define ENABLE 0
  10          #define DISENABLE 1
  11          bit infoChanged=1;
  12          unsigned char xdata null16x16[]={ 
  13          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  14          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  15          };
  16          unsigned char xdata underline16x16[]={ 
  17          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  18          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  19          
  20          };      
  21          unsigned char xdata full16x16[]={ 
  22          0x00,0x00,0x00,0x00,0xfc,0xfc,0xff,0xff,0xff,0xff,0xfc,0xfc,0x00,0x00,0x00,0x00,
  23          0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  24          
  25          };
  26          unsigned char xdata half16x16[]={ 
  27          0x00,0x00,0x00,0x00,0xfc,0x04,0x07,0x07,0x07,0x07,0x04,0xfc,0x00,0x00,0x00,0x00,
  28          0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  29          };
  30          
  31          /*unsigned char xdata half16x16[]={
  32          0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  
  33          0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, };*/
  34          unsigned char xdata empty16x16[]={ 
  35          0x00,0x00,0x00,0x00,0xfc,0x04,0x07,0x07,0x07,0x07,0x04,0xfc,0x00,0x00,0x00,0x00,
  36          0x00,0x00,0x00,0x00,0xff,0x80,0x80,0x80,0x80,0x80,0x80,0xff,0x00,0x00,0x00,0x00,
  37          };
  38          
  39          unsigned char xdata error16x16[]={ 
  40          0x00,0x00,0x00,0x00,0xfc,0x24,0x47,0x87,0x87,0x47,0x24,0xfc,0x00,0x00,0x00,0x00,
  41          0x00,0x00,0x00,0x00,0xff,0x84,0x82,0x81,0x81,0x82,0x84,0xff,0x00,0x00,0x00,0x00,
  42          };
  43          unsigned char xdata arrow16x16[]={ 
  44          0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x90,0xA0,0xC0,0x80,
  45          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x01,0x00,
  46          };
  47          
  48          void    LCD_WrCmd(uchar port,uchar  cmd)        
  49          {  
  50   1      delayUs(DISPLAY_DELAY_TIME);
  51   1              EN=0;
  52   1              if(port==1){
  53   2                      CS1=ENABLE;
  54   2                      delayUs(DISPLAY_DELAY_TIME);
  55   2                      CS2=DISENABLE;
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 2   

  56   2                      delayUs(DISPLAY_DELAY_TIME);
  57   2              }
  58   1              else
  59   1              {
  60   2                      CS1=DISENABLE;
  61   2                      delayUs(DISPLAY_DELAY_TIME);
  62   2                      CS2=ENABLE;
  63   2                      delayUs(DISPLAY_DELAY_TIME);
  64   2         }
  65   1         DI=0;        
  66   1         RW=0;
  67   1         EN=1;
  68   1         LCD=cmd; 
  69   1         EN=0;
  70   1      }
  71          
  72          void  LCD_WrDat(uchar port ,uchar wrdata)       
  73          {  
  74   1      delayUs(DISPLAY_DELAY_TIME);
  75   1              EN=0;
  76   1              if(port==1){
  77   2                      CS1=ENABLE;
  78   2                      delayUs(DISPLAY_DELAY_TIME);
  79   2                      CS2=DISENABLE;
  80   2                      delayUs(DISPLAY_DELAY_TIME);
  81   2              }else{
  82   2                      CS1=DISENABLE;
  83   2                      delayUs(DISPLAY_DELAY_TIME);
  84   2                      CS2=ENABLE;
  85   2                      delayUs(DISPLAY_DELAY_TIME);
  86   2         }
  87   1         DI=1;        
  88   1         RW=0;
  89   1         EN=1;
  90   1         LCD=wrdata; 
  91   1         EN=0;
  92   1      }
  93          
  94          void  LCD_DispFill(uchar filldata) 
  95          {  uchar  x, y;
  96   1         LCD_WrCmd(1,LCD_STARTROW);
  97   1         LCD_WrCmd(2,LCD_STARTROW);   
  98   1         for(y=0; y<8; y++)  
  99   1         {  LCD_WrCmd(1,LCD_ADDRSTRY+y);
 100   2            LCD_WrCmd(1,LCD_ADDRSTRX);
 101   2            LCD_WrCmd(2,LCD_ADDRSTRY+y);
 102   2            LCD_WrCmd(2,LCD_ADDRSTRX);
 103   2         
 104   2            for(x=0; x<64; x++)
 105   2            {  LCD_WrDat(1,filldata);
 106   3               LCD_WrDat(2,filldata);
 107   3      
 108   3            } 
 109   2         }
 110   1      }
 111          
 112          void  LCD_DispIni(void)                 
 113          {
 114   1      
 115   1         LCD_RST = 0; 
 116   1         delayUs(1000);
 117   1         LCD_RST = 1;  
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 3   

 118   1         delayUs(1000);
 119   1         LCD_WrCmd(1,LCD_DISPON);      
 120   1         LCD_WrCmd(1,LCD_STARTROW);
 121   1         delayUs(1000);       
 122   1         LCD_WrCmd(2,LCD_DISPON);     
 123   1         LCD_WrCmd(2,LCD_STARTROW);           
 124   1         LCD_DispFill(0x00);
 125   1         LCD_WrCmd(1,LCD_ADDRSTRY+0);
 126   1         LCD_WrCmd(1,LCD_ADDRSTRX+0);
 127   1         LCD_WrCmd(2,LCD_ADDRSTRY+0);
 128   1         LCD_WrCmd(2,LCD_ADDRSTRX+0);
 129   1      }
 130          uchar xdata chrBuf[32];
 131          void getBytesFormGB2312s(char* chr){
 132   1              uchar i=0, charSize=0,offsetLen=32;
 133   1              unsigned long temp_addr;
 134   1              
 135   1              
 136   1                  //用12x12字体
 137   1                      temp_addr = GB_ADDR(chr,16);
 138   1                      charSize = GB_HZZF_len(chr);
 139   1      
 140   1                      CS=0;
 141   1              //      WriteByte(0x0b);
 142   1              //      WriteByte((temp_addr>>16)&0xff);
 143   1              //      WriteByte((temp_addr>>8)&0xff);
 144   1              //      WriteByte((temp_addr>>0)&0xff);
 145   1              //      WriteByte(0xFF);
 146   1      
 147   1                      WriteByte(0x03);
 148   1                      WriteByte((temp_addr>>16)&0xff);
 149   1                      WriteByte((temp_addr>>8)&0xff);
 150   1                      WriteByte((temp_addr>>0)&0xff);
 151   1                      if(charSize==2){
 152   2                              for(i=0;i<offsetLen;i++){
 153   3                                      chrBuf[i]=ReadByte(); 
 154   3                              }
 155   2                      } else  if(charSize==1){
 156   2              
 157   2      
 158   2                              for(i=0;i<(offsetLen/2);i++){
 159   3                                      chrBuf[2*i]=ReadByte(); //todo此处算法需更改
 160   3                                      chrBuf[2*i+1]=0x00; 
 161   3                              }
 162   2                      
 163   2                      }
 164   1                      CS=1;   
 165   1      }
 166          
 167          void lcd_disp_sz_char(uchar cx,uchar cy,uchar* chr)
 168          {
 169   1              uchar *p,i,s,page;
 170   1              uchar port;
 171   1      
 172   1              getBytesFormGB2312s(chr);
 173   1              p=chrBuf;
 174   1              if(cx<4)
 175   1              {
 176   2                      port=1;
 177   2                      s=cx<<4;
 178   2              }
 179   1              else
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 4   

 180   1              {
 181   2                      port=2;
 182   2                      s=((cx-4)<<4);
 183   2                              
 184   2              }
 185   1              
 186   1              for(page=0;page<2;page++)
 187   1              {
 188   2                      LCD_WrCmd(port,0xb8+cy*2+page);
 189   2                      delayUs(100);
 190   2                      
 191   2                      LCD_WrCmd(port,0x40+s);
 192   2                      delayUs(100);
 193   2                      for(i=0;i<16;i++)
 194   2                      {
 195   3                              LCD_WrDat(port,*p);
 196   3                              delayUs(10);
 197   3                              p++;
 198   3                      }
 199   2              }
 200   1      }
 201          void LCD_PutString(unsigned char cx,unsigned char cy,unsigned char  *s)
 202          {
 203   1              uchar wordCount=0,charSize=0;
 204   1              
 205   1      //      lcd_disp_sz_char(0,0,s);
 206   1      //      lcd_disp_sz_char(4,1,s+2);
 207   1              while(*s!='\0'&&wordCount<10)
 208   1              {
 209   2                      charSize = GB_HZZF_len(s);
 210   2                      lcd_disp_sz_char(cx,cy,s);
 211   2                      wordCount++;
 212   2                      s++;
 213   2                      if(charSize==2)
 214   2                      {
 215   3                      s++;
 216   3                      }
 217   2                      cx++;
 218   2                      if(cx>7) {cx=0;cy++;}
 219   2              }
 220   1       
 221   1      }
 222          
 223          uchar xdata chrBuf_24[72];
 224          void get24x24BytesFormGB2312s(char* chr,uchar * buf){
 225   1              uchar i=0, charSize=0,offsetLen=72;
 226   1              unsigned long temp_addr;
 227   1              
 228   1              
 229   1      
 230   1                      temp_addr = GB_ADDR(chr,24);
 231   1                      charSize = GB_HZZF_len(chr);
 232   1      
 233   1                      CS=0;
 234   1              //      WriteByte(0x0b);
 235   1              //      WriteByte((temp_addr>>16)&0xff);
 236   1              //      WriteByte((temp_addr>>8)&0xff);
 237   1              //      WriteByte((temp_addr>>0)&0xff);
 238   1              //      WriteByte(0xFF);
 239   1      
 240   1                      WriteByte(0x03);
 241   1                      WriteByte((temp_addr>>16)&0xff);
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 5   

 242   1                      WriteByte((temp_addr>>8)&0xff);
 243   1                      WriteByte((temp_addr>>0)&0xff);
 244   1                      if(charSize==2){
 245   2                              for(i=0;i<offsetLen;i++){
 246   3                                      buf[i]=ReadByte(); 
 247   3                              }
 248   2                      } else  if(charSize==1){
 249   2              
 250   2      
 251   2                              for(i=0;i<(offsetLen/2);i++){
 252   3                                      buf[2*i]=ReadByte(); //todo此处算法需更改
 253   3                                      buf[2*i+1]=0x00; 
 254   3                              }
 255   2                      
 256   2                      }
 257   1                      CS=1;   
 258   1      }
 259          
 260          
 261          void lcd_disp_sz_char_24(uchar cx,uchar cy,uchar* chr,uchar* buf)
 262          {
 263   1              uchar *p,i,s,page;
 264   1              uchar port;
 265   1              if(chr!=0)
 266   1              {
 267   2                      get24x24BytesFormGB2312s(chr,buf);
 268   2              }
 269   1              p=chrBuf_24;
 270   1              if(cx<2)
 271   1              {
 272   2                      port=1;
 273   2                      s=cx*24;
 274   2              }
 275   1              else
 276   1              {
 277   2                      port=2;
 278   2                      s=((cx-2)*24);
 279   2                              
 280   2              }
 281   1              
 282   1              for(page=0;page<3;page++)
 283   1              {
 284   2                      LCD_WrCmd(port,0xb8+cy*3+page);
 285   2                      delayUs(100);
 286   2                      LCD_WrCmd(port,0x40+s);
 287   2                      delayUs(100);
 288   2                      for(i=0;i<24;i++)
 289   2                      {
 290   3                              LCD_WrDat(port,*p);
 291   3                              delayUs(10);
 292   3                              p++;
 293   3                      }
 294   2              }
 295   1      }
 296          
 297          
 298          void LCD_PutString_24(unsigned char cx,unsigned char cy,unsigned char  *s)
 299          {
 300   1              uchar wordCount=0,charSize=0;
 301   1      
 302   1      //      lcd_disp_sz_char(0,0,s);
 303   1      //      lcd_disp_sz_char(4,1,s+2);
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 6   

 304   1              while(*s!='\0'&&wordCount<10)
 305   1              {
 306   2                      charSize = GB_HZZF_len(s);
 307   2                      lcd_disp_sz_char_24(cx,cy,s,chrBuf_24);
 308   2                      wordCount++;
 309   2                      s++;
 310   2                      if(charSize==2)
 311   2                      {
 312   3                      s++;
 313   3                      }
 314   2                      cx++;
 315   2                      if(cx>4) {cx=0;cy++;}
 316   2              }
 317   1       
 318   1      }
 319          void lcd_disp_sz_char_24_original_x(uchar x,uchar cy,uchar* chr,uchar* buf)
 320          {
 321   1              uchar *p,i,s,page;
 322   1              uchar port;
 323   1              if(chr!=0)
 324   1              {
 325   2                      get24x24BytesFormGB2312s(chr,buf);
 326   2              }
 327   1              p=buf;
 328   1              if(x<64)
 329   1              {
 330   2                      port=1;
 331   2                      s=x;
 332   2              }
 333   1              else
 334   1              {
 335   2                      port=2;
 336   2                      s=x-64;
 337   2                              
 338   2              }
 339   1              
 340   1              for(page=0;page<3;page++)
 341   1              {
 342   2                      LCD_WrCmd(port,0xb8+cy*3+page);
 343   2                      delayUs(100);
 344   2                      LCD_WrCmd(port,0x40+s);
 345   2                      delayUs(100);
 346   2                      for(i=0;i<24;i++)
 347   2                      {
 348   3                              LCD_WrDat(port,*p);
 349   3                              delayUs(10);
 350   3                              p++;
 351   3                      }
 352   2              }
 353   1      }
 354          
 355          void LCD_PutString_24_cy(unsigned char cy,unsigned char  *s)
 356          {
 357   1              uchar wordCount=0,charSize=0, *p=s;
 358   1              uchar x[4];
 359   1              //计算总字数，确定排列方式
 360   1              while(*p!='\0'){
 361   2                      charSize= GB_HZZF_len(p);
 362   2                      wordCount++;
 363   2                      p++;
 364   2                      if(charSize==2){
 365   3                              p++;
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 7   

 366   3                      }
 367   2              }
 368   1              switch (wordCount){
 369   2              case 1:
 370   2                      x[0]=39;
 371   2                      break;
 372   2              case 2:
 373   2                  x[0]=29;
 374   2                      x[1]=74;
 375   2                      break;
 376   2              case 3:
 377   2                      x[0]=38;
 378   2                      x[1]=64;
 379   2                      x[2]=86;
 380   2                      break;
 381   2              default:
 382   2                      x[0]=0;
 383   2                      x[1]=34;
 384   2                      x[2]=69;
 385   2                      x[3]=103;
 386   2              }
 387   1              wordCount=0;
 388   1      //      lcd_disp_sz_char(0,0,s);
 389   1      //      lcd_disp_sz_char(4,1,s+2);
 390   1              while(*s!='\0'&&wordCount<4)
 391   1              {
 392   2                      charSize = GB_HZZF_len(s);
 393   2                      lcd_disp_sz_char_24_original_x(x[wordCount],cy,s,chrBuf_24);
 394   2                      wordCount++;
 395   2                      s++;
 396   2                      if(charSize==2)
 397   2                      {
 398   3                      s++;
 399   3                      }
 400   2                      
 401   2              }
 402   1       
 403   1      }
 404          uchar xdata nameCharBuf[288];
 405          void get24x24NameBytesFormGB2312s(char* chr,uint startIndex){
 406   1              uchar i=0, charSize=0,offsetLen=72;
 407   1              unsigned long temp_addr;
 408   1              
 409   1              
 410   1      
 411   1                      temp_addr = GB_ADDR(chr,24);
 412   1                      charSize = GB_HZZF_len(chr);
 413   1      
 414   1                      CS=0;
 415   1              //      WriteByte(0x0b);
 416   1              //      WriteByte((temp_addr>>16)&0xff);
 417   1              //      WriteByte((temp_addr>>8)&0xff);
 418   1              //      WriteByte((temp_addr>>0)&0xff);
 419   1              //      WriteByte(0xFF);
 420   1      
 421   1                      WriteByte(0x03);
 422   1                      WriteByte((temp_addr>>16)&0xff);
 423   1                      WriteByte((temp_addr>>8)&0xff);
 424   1                      WriteByte((temp_addr>>0)&0xff);
 425   1                      if(charSize==2){
 426   2                              for(i=0;i<offsetLen;i++){
 427   3                                      nameCharBuf[i+startIndex]=ReadByte(); 
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 8   

 428   3                              }
 429   2                      } else  if(charSize==1){
 430   2              
 431   2      
 432   2                              for(i=0;i<(offsetLen/2);i++){
 433   3                                      nameCharBuf[2*i+startIndex]=ReadByte(); //todo此处算法需更改
 434   3                                      nameCharBuf[2*i+1+startIndex]=0x00; 
 435   3                              }
 436   2                      
 437   2                      }
 438   1                      CS=1;   
 439   1      }
 440          void arrangeNameArr(uchar wordCount){
 441   1              uint m;
 442   1              //暂且全部硬编码
 443   1              switch(wordCount){
 444   2              case 1:
 445   2                 for (m=72;m<288;m++){
 446   3                   nameCharBuf[m]=0;
 447   3                 }
 448   2                 for (m=72;m<144;m++){
 449   3                      if(m%24>11){
 450   4                   nameCharBuf[m]=nameCharBuf[m-72-12];
 451   4                      }
 452   3                 }
 453   2                 for (m=144;m<216;m++){
 454   3                      if(m%24<11){
 455   4                   nameCharBuf[m]=nameCharBuf[m-144+12];
 456   4                 
 457   4                       }
 458   3                }
 459   2                for (m=0;m<72;m++){
 460   3                   nameCharBuf[m]=0;
 461   3                 }
 462   2      
 463   2              break;
 464   2              case 2:
 465   2               
 466   2                 for (m=287;m>215;m--){
 467   3                   nameCharBuf[m]=nameCharBuf[m-144];
 468   3                 }
 469   2                 for (m=72;m<216;m++){
 470   3                   nameCharBuf[m]=0;
 471   3                 }
 472   2              break;
 473   2              case 3:
 474   2                 for (m=216;m<288;m++){
 475   3                   nameCharBuf[m]=nameCharBuf[m-72];
 476   3                 }
 477   2                 for (m=215;m>143;m--){
 478   3                   if(m%24<11){
 479   4                       nameCharBuf[m]=nameCharBuf[m-72+12];
 480   4                       }
 481   3                       else{
 482   4                          nameCharBuf[m]=0;
 483   4                       }
 484   3                 }
 485   2                 for (m=143;m>71;m--){
 486   3                    if(m%24>11){
 487   4                       nameCharBuf[m]=nameCharBuf[m-0-12];
 488   4                        }
 489   3                        else{
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 9   

 490   4                              nameCharBuf[m]=0;
 491   4                        }
 492   3                 
 493   3                 }
 494   2                 
 495   2              break;
 496   2              }
 497   1      }
 498          void LCD_PutName_24_cy(unsigned char cy,unsigned char  *s){
 499   1              uchar m,wordCount=0,charSize=0, *p=s,offsetLen=72;
 500   1              
 501   1              if(infoChanged)
 502   1              {
 503   2              infoChanged=0;
 504   2                      while(*s!='\0'&&wordCount<4)
 505   2                      {
 506   3                              charSize = GB_HZZF_len(s);
 507   3                              get24x24NameBytesFormGB2312s(s,72*wordCount);
 508   3                              wordCount++;
 509   3                              s++;
 510   3                              if(charSize==2)
 511   3                              {
 512   4                              s++;
 513   4                              }
 514   3                      
 515   3                      }
 516   2                      arrangeNameArr(wordCount);
 517   2      
 518   2              }
 519   1              for(m=0;m<4;m++){
 520   2                      lcd_disp_sz_char_24_original_x(16+m*24,cy,0,nameCharBuf+offsetLen*m);
 521   2              }
 522   1      
 523   1      }
 524          void getBytesFormASCIIs(char* chr){
 525   1              uchar i=0, charSize=0,offsetLen=32;
 526   1              unsigned long temp_addr;
 527   1              
 528   1              
 529   1      
 530   1                      temp_addr = GB_ADDR(chr,16);
 531   1                      charSize = GB_HZZF_len(chr);
 532   1      
 533   1                      CS=0;
 534   1              //      WriteByte(0x0b);
 535   1              //      WriteByte((temp_addr>>16)&0xff);
 536   1              //      WriteByte((temp_addr>>8)&0xff);
 537   1              //      WriteByte((temp_addr>>0)&0xff);
 538   1              //      WriteByte(0xFF);
 539   1      
 540   1                      WriteByte(0x03);
 541   1                      WriteByte((temp_addr>>16)&0xff);
 542   1                      WriteByte((temp_addr>>8)&0xff);
 543   1                      WriteByte((temp_addr>>0)&0xff);
 544   1                      if(charSize==2){
 545   2                              for(i=0;i<offsetLen;i++){
 546   3                                      chrBuf[i]=ReadByte(); 
 547   3                              }
 548   2                      } else  if(charSize==1){
 549   2              
 550   2      
 551   2                              for(i=0;i<(offsetLen/2);i++){
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 10  

 552   3                                      chrBuf[i]=ReadByte();
 553   3                                      chrBuf[16+i]=0x00; 
 554   3                              }
 555   2                      
 556   2                      }
 557   1                      CS=1;   
 558   1      }
 559          void lcd_disp_sz_SingleBytechar(uchar cy,uchar cx,uchar* chr)
 560          {
 561   1              uchar *p,i,s,page;
 562   1              uchar port;
 563   1      
 564   1              getBytesFormASCIIs(chr);
 565   1              p=chrBuf;
 566   1              if(cx<8)
 567   1              {
 568   2                      port=1;
 569   2                      s=cx<<3;
 570   2              }
 571   1              else
 572   1              {
 573   2                      port=2;
 574   2                      s=((cx-8)<<3);
 575   2                              
 576   2              }
 577   1              
 578   1              for(page=0;page<2;page++)
 579   1              {
 580   2                      LCD_WrCmd(port,0xb8+cy*2+page);
 581   2                      delayUs(100);
 582   2                      LCD_WrCmd(port,0x40+s);
 583   2                      delayUs(100);
 584   2                      for(i=0;i<8;i++)
 585   2                      {
 586   3                              LCD_WrDat(port,*p);
 587   3                              delayUs(10);
 588   3                              p++;
 589   3                      }
 590   2              }
 591   1      }
 592          void LCD_PutSingleByteString(unsigned char cx,unsigned char cy,unsigned char  *s)
 593          {
 594   1              uchar wordCount=0,charSize=0;
 595   1              
 596   1      //      lcd_disp_sz_char(0,0,s);
 597   1      //      lcd_disp_sz_char(4,1,s+2);
 598   1              while(*s!='\0'&&wordCount<10)
 599   1              {
 600   2                      charSize = GB_HZZF_len(s); //charsize只可能为一
 601   2                      lcd_disp_sz_SingleBytechar(cy,cx,s);
 602   2                      wordCount++;
 603   2                      s++;
 604   2                      if(charSize==2)
 605   2                      {
 606   3                      s++;
 607   3                      }
 608   2                      cx++;
 609   2                      if(cx>15) {cx=0;cy++;}
 610   2              }
 611   1       
 612   1      }
 613          uchar charArr[2];
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 11  

 614          void LCD_PutChar(unsigned char cx,unsigned char cy,unsigned char  chr){
 615   1              uchar *p,i,s,page;
 616   1              uchar port;
 617   1              chr=0;//消除warning 该变量无用，仅为兼容之前接口
 618   1              cy--;
 619   1      
 620   1              p=arrow16x16;
 621   1              if(cx<4)
 622   1              {
 623   2                      port=1;
 624   2                      s=cx<<4;
 625   2              }
 626   1              else
 627   1              {
 628   2                      port=2;
 629   2                      s=((cx-4)<<4);
 630   2                              
 631   2              }
 632   1              
 633   1              for(page=0;page<2;page++)
 634   1              {
 635   2                      LCD_WrCmd(port,0xb8+cy*2+page);
 636   2                      delayUs(100);
 637   2                      LCD_WrCmd(port,0x40+s);
 638   2                      delayUs(100);
 639   2                      for(i=0;i<16;i++)
 640   2                      {
 641   3                              LCD_WrDat(port,*p);
 642   3                              delayUs(10);
 643   3                              p++;
 644   3                      }
 645   2              }
 646   1      }
 647          uchar *lbatStateGraph=0;
 648          void FullCGRAM()
 649          { 
 650   1           lbatStateGraph=full16x16;
 651   1      }   
 652          void HalfCGRAM()
 653          { 
 654   1           lbatStateGraph=half16x16;
 655   1      }
 656          void EmptyCGRAM()
 657          { 
 658   1           lbatStateGraph=empty16x16;
 659   1      } 
 660          void ErrorCGRAM()
 661          { 
 662   1           lbatStateGraph=error16x16;
 663   1      }
 664          void NullCGRAM()
 665          { 
 666   1           lbatStateGraph=null16x16;
 667   1      }
 668          void DisplayCGRAM(unsigned char cx,unsigned char cy)
 669          {
 670   1              
 671   1              uchar *p,i,s,page;
 672   1              uchar port;
 673   1              cy--;
 674   1              
 675   1              p=lbatStateGraph;
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 12  

 676   1              if(cx<4)
 677   1              {
 678   2                      port=1;
 679   2                      s=cx<<4;
 680   2              }
 681   1              else
 682   1              {
 683   2                      port=2;
 684   2                      s=((cx-4)<<4);
 685   2                              
 686   2              }
 687   1              
 688   1              for(page=0;page<2;page++)
 689   1              {
 690   2                      LCD_WrCmd(port,0xb8+cy*2+page);
 691   2                      delayUs(100);
 692   2                      LCD_WrCmd(port,0x40+s);
 693   2                      delayUs(100);
 694   2                      for(i=0;i<16;i++)
 695   2                      {
 696   3                              LCD_WrDat(port,*p);
 697   3                              delayUs(10);
 698   3                              p++;
 699   3                      }
 700   2              }
 701   1      } 
 702          uchar oldUnderlineX=0,oldUnderlineY=0;
 703          void resetUnderline(){
 704   1              oldUnderlineX=0;
 705   1              oldUnderlineY=0;
 706   1      }
 707          void DisplayUnderline(unsigned char cx,unsigned char cy,bit display)
 708          {
 709   1              uchar *p,i,s,page;
 710   1              uchar port;
 711   1              cy--;
 712   1              if(display==0){
 713   2              //擦去下划线
 714   2              }
 715   1              if(oldUnderlineX!=0||oldUnderlineY!=0){ 
 716   2                      p=null16x16;
 717   2                      if(oldUnderlineX<4)
 718   2                      {
 719   3                              port=1;
 720   3                              s=oldUnderlineX<<4;
 721   3                      }
 722   2                      else
 723   2                      {
 724   3                              port=2;
 725   3                              s=((oldUnderlineX-4)<<4);
 726   3                              
 727   3                      }
 728   2              
 729   2                      for(page=0;page<2;page++)
 730   2                      {
 731   3                              LCD_WrCmd(port,0xb8+oldUnderlineY*2+page);
 732   3                              delayUs(100);
 733   3                              LCD_WrCmd(port,0x40+s);
 734   3                              delayUs(100);
 735   3                              for(i=0;i<16;i++)
 736   3                              {
 737   4                                      LCD_WrDat(port,*p);
C51 COMPILER V9.01   LCD12864                                                              02/17/2014 15:53:00 PAGE 13  

 738   4                                      delayUs(10);
 739   4                                      p++;
 740   4                              }
 741   3                      }
 742   2              }
 743   1              oldUnderlineX=cx;
 744   1              oldUnderlineY=cy;
 745   1              p=underline16x16;
 746   1              if(cx<4)
 747   1              {
 748   2                      port=1;
 749   2                      s=cx<<4;
 750   2              }
 751   1              else
 752   1              {
 753   2                      port=2;
 754   2                      s=((cx-4)<<4);
 755   2                              
 756   2              }
 757   1              
 758   1              for(page=0;page<2;page++)
 759   1              {
 760   2                      LCD_WrCmd(port,0xb8+cy*2+page);
 761   2                      delayUs(100);
 762   2                      LCD_WrCmd(port,0x40+s);
 763   2                      delayUs(100);
 764   2                      for(i=0;i<16;i++)
 765   2                      {
 766   3                              LCD_WrDat(port,*p);
 767   3                              delayUs(10);
 768   3                              p++;
 769   3                      }
 770   2              }
 771   1      }   
 772          
 773          void LCD_PutPosition(unsigned char x,unsigned char y)
 774          { 
 775   1        DisplayUnderline(x,y+1,1);
 776   1       
 777   1      }
 778          void ClrScreen()
 779          { 
 780   1         LCD_DispFill(0x00);
 781   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4240    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    623     170
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
